/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven'
apply plugin: 'signing'

if (gradle.getStartParameter().getTaskNames().contains("uploadArchives")) {
    println("> Publishing: " + libraryName + " v" + versioning.name)
}

def hasProxy() { return hasProperty('systemProp.http.proxyUser')}
def getProxyType() { return "http" }
def getProxyHost() { return getProperties().get("systemProp.http.proxyHost") }
def getProxyPort() { return Integer.parseInt((String) getProperties().get("systemProp.http.proxyPort")) }
def getProxyUser() { return getProperties().get("systemProp.http.proxyUser") }
def getProxyPassword() { return getProperties().get("systemProp.http.proxyPassword") }

def isReleaseBuild() {
    return versioning.name.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return getProperties().get('nexus.username')
}

def getRepositoryPassword() {
    return getProperties().get('nexus.password')
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = publishedGroupId
                pom.artifactId = artifact
                pom.version = versioning.name

                if (hasProxy()) {
                    println("PROXY! host: " + getProxyHost() + ", port: " + getProxyPort() + ", type: " + getProxyType() + ", userName: " + getProxyUser() + ", password: " + getProxyPassword())
                }
                repository(url: getReleaseRepositoryUrl()) {
                    if (hasProxy()) {
                        proxy(host: getProxyHost(), port: getProxyPort(), type: getProxyType(), userName: getProxyUser(), password: getProxyPassword())
                    }
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    if (hasProxy()) {
                        proxy(host: getProxyHost(), port: getProxyPort(), type: getProxyType(), userName: getProxyUser(), password: getProxyPassword())
                    }
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    name libraryName
                    packaging packageExt
                    description libraryDescription
                    url siteUrl
                    scm {
                        connection gitUrl
                        developerConnection gitUrl
                        url siteUrl
                    }
                    licenses {
                        license {
                            name licenseName
                            url licenseUrl
                            distribution licenseDist
                        }
                    }
                    developers {
                        developer {
                            id developerId
                            name developerName
                            email developerEmail
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}